#!/bin/sh
#
# Copyright 1995-2005, Advanced Computer Systems , Inc.
# Via Della Bufalotta, 378 - 00139 Roma - Italy
# http://www.acsys.itA.C.S. - Advanced Computer Systems S.p.A.
# 
# This is UNPUBLISHED PROPRIETARY SOURCE CODE of Advanced Computer Systems, S.p.A.;
# the contents of this file may not be disclosed to third parties, copied or
# duplicated in any form, in whole or in part, without the prior written
# permission of Advanced Computer Systems, S.p.A.
#	
#
#   $Prod: A.C.S. Repurge Blocked Pending procedure $
#
#	$Id$
#
#	$Author$
#
#	$Log$
#	Revision 1.1  2009/10/22 13:28:54  achnat
#	Added rePurgeBlockedPending
#	








exit_error() {
	echo "" >> $LOG_FILE
	echo "---------------------------------------------------------------------------" | tee -a $LOG_FILE
	echo "*** REPURGE ABORTED ***" | tee -a $LOG_FILE
	echo "See log file $LOG_FILE"
	echo "" | tee -a $LOG_FILE
	exit 1
}


usage() {
	echo "usage: rePurgeBlockedPending <hostname> <dbauser> <dbname> <numero> <units>"
	echo "---------------------------------------------------------------------------"
	echo "units:"
	echo "   h | hours"
	echo "   m | minutes"
	echo "   s | seconds"
	echo "---------------------------------------------------------------------------"
	echo ""
	echo "Wrong syntax." >> $LOG_FILE
	echo "*** REPURGE ABORTED ***" >> $LOG_FILE
	exit 1
}


result_message() {
	if [ "$1" != 0 ] 
	then 
		echo_failure
	else
		echo_success
	fi
	
	echo ""
}


check_conn() {
	echo "Checking connection on $DBNAME ..." >> $LOG_FILE
	echo -n "Checking connection on $DBNAME ..."
	sleep 1
	psql -h $HNAME -U $DBAUSR $DBNAME -c "\l" 2>> $LOG_FILE 1> /dev/null
	if [ "$?" != 0 ]
	then
		result_message 1
		echo "*** ERROR: rePurgeBlockedPending - Cannot connect to $DBNAME ***" | tee -a $LOG_FILE
		exit_error
	fi
	
	result_message 0
	echo ">> connection done." >> $LOG_FILE
	echo "" >> $LOG_FILE
}


init_log() {
	touch $LOG_FILE
	if [ "$?" != 0 ]
	then
		echo "*** ERROR: rePurgeBlockedPending - Cannot create log file. ***"
		echo ""
		exit 1
	fi
	
	echo "" > $LOG_FILE
	echo "********************************************************************************" >> $LOG_FILE
	echo "*   REPURGE BLOCKED PENDING                                                    *" >> $LOG_FILE
	echo "*   `date`                                              *" >> $LOG_FILE
	echo "********************************************************************************" >> $LOG_FILE
	echo "" >> $LOG_FILE
}


check_proc() {
	echo "Checking for procedure presence ..." >> $LOG_FILE
	echo -n "Checking for procedure presence ..."
	sleep 1
	psql -h $HNAME -U $DBAUSR $DBNAME -c "\df" | grep p_postinvqueue_manager 2>> $LOG_FILE 1> /dev/null
	if [ "$?" != 0 ]
	then
		result_message 1
		echo "*** ERROR: rePurgeBlockedPending - Procedure p_postinvqueue_manager not installed ***" | tee -a $LOG_FILE
		exit_error
	fi
	
	result_message 0
	echo ">> procedure done." >> $LOG_FILE
	echo "" >> $LOG_FILE
}


run_proc() {
	echo "Running repurge ..." >> $LOG_FILE
	echo -n "Running repurge ..."
	sleep 1
	psql -h $HNAME -U $DBAUSR $DBNAME -c "SELECT p_postinvqueue_manager($time_sec);" 2>> $LOG_FILE 1> /dev/null
	if [ "$?" != 0 ]
	then
		result_message 1
		echo "*** ERROR: rePurgeBlockedPending - repurge failed ***" | tee -a $LOG_FILE
		exit_error
	fi
	
	result_message 0
	echo ">> repurge done." >> $LOG_FILE
	echo "" >> $LOG_FILE
}





########## MAIN ##########

echo ""
echo "REPURGE BLOCKED PENDING"
echo "---------------------------------------------------------------------------"

# Source function library
. /etc/rc.d/init.d/functions 

export EXE_DIR=`dirname $0`
cd $EXE_DIR
export EXE_DIR=`pwd`

export LOG_FILE="$EXE_DIR/logs/repurge_`date +'%Y%m%d_%H%M%S'`.log"

export HNAME=$1
export DBAUSR=$2
export DBNAME=$3
export NUM="$4"
export UTS="$5"

init_log

if [[ $NUM = *[^0-9]* ]]
then
	echo "*** ERROR!!! - first value must be an integer number ***" | tee -a $LOG_FILE
	exit_error
fi

case "$UTS" in
	'h' | 'hours')
		(( time_sec = ($NUM * 60) * 60))
		;;
	'm' | 'minutes')
		(( time_sec = $NUM * 60 ))
		;;
	's' | 'seconds')
		time_sec=$NUM
		;;
	*)
		usage
		;;
esac

if test -z "$PGPASSWORD"
then
	echo -n "Insert $DBAUSR password: "
	read -s answer
	export PGPASSWORD=$answer
	echo ""
	echo ""
fi

# Check db connection
check_conn

# Check p_postinvqueue_manager procedure
check_proc

# Run p_postinvqueue_manager procedure
run_proc

echo "---------------------------------------------------------------------------" | tee -a $LOG_FILE
echo ">> repurge successfully completed." | tee -a $LOG_FILE
echo ""
exit 0



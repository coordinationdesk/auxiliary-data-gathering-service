// PRQA S 1050 EOF
/*

	Copyright 1995-2016, Advanced Computer Systems , Inc.
	Via Della Bufalotta, 378 - 00139 Roma - Italy
	http://www.acsys.it

	All Rights Reserved.

	This is UNPUBLISHED PROPRIETARY SOURCE CODE of Advanced Computer Systems;
	the contents of this file may not be disclosed to third parties, copied or
	duplicated in any form, in whole or in part, without the prior written
	permission of Advanced Computer Systems, Inc.

	$Prod: A.C.S. Db Cryosat Library $

	$Id$

	$Author$

	$Log$
	Revision 6.0  2016/07/07 13:44:04  damdec
	CSGACQ-82: special queries modified to be compatible with Oracle
	
	Revision 5.3  2016/04/19 13:53:47  marpas
	coding best practice application in progress
	useless virtual filedName method removed
	
	Revision 5.2  2016/04/11 13:28:13  marpas
	adopting new db interfaces
	coding best practices application in progress
	
	Revision 5.1  2016/03/26 21:42:50  marpas
	using new db I/F
	
	Revision 5.0  2015/02/17 11:25:25  marfav
	Field unique_id added to table t_smactions
	
	Revision 4.0  2013/09/30 12:30:55  marpas
	the following classes have been removed:
	dbDistributionPolicy
	dbDistributionPolicyQuery
	dbIORepository
	dbIORepositoryQuery
	dbReceptionPolicy
	dbReceptionPolicyQuery
	
	Revision 3.0  2013/09/19 14:57:23  marfav
	dbSMactions now include inventory id pointers
	
	Revision 2.14  2013/03/29 19:51:29  marpas
	removing html related functions
	
	Revision 2.13  2013/02/20 17:09:18  marpas
	qa warnings
	
	Revision 2.12  2012/11/19 22:51:15  marpas
	compile with PDS_OLD_SCHEMA to use old pds schema.
	dbReceptionRule and related Query class introduced
	
	Revision 2.11  2012/11/16 13:01:13  marpas
	realignement of MAIN STREAM
	Introducing ADCS1FixedHeaderFactory class
	
	Revision 2.8  2012/06/15 09:54:29  marpas
	removing warning related to virtual method hiding
	
	Revision 2.7  2012/03/12 11:23:45  marpas
	aligning to new schema
	
	Revision 2.6  2012/02/14 12:52:46  marpas
	 refactoring and introducing dbInventory::uniqueId
	
	Revision 2.5  2011/03/02 18:47:13  marpas
	serial 8 support
	
	Revision 2.4  2010/06/08 14:49:38  marpas
	dbFileType::getAssociatedSatellites method implemented
	
	Revision 2.3  2009/05/18 17:27:35  marpas
	dbFileType::checkPeriodicity has a new parameter to allow an inventory to be performed BEFORE the verification.
	A bug was also removed: no check on the returned count was performed: the error was always reported
	
	Revision 2.2  2009/04/03 17:08:38  marpas
	dbFileType::checkPeriodicity implemented
	
	Revision 2.1  2009/02/04 17:31:52  marpas
	new file type schema alignement
	
	Revision 2.0  2006/02/28 09:09:35  marpas
	Exception 2.1 I/F adopted
	
	Revision 1.25  2005/06/17 10:31:54  marpas
	std namespaces took into consideration
	
	Revision 1.24  2004/10/14 15:14:53  paoscu
	Inventory and PreInventory options added
	
	Revision 1.23  2004/07/07 10:34:32  paoscu
	dbPersistent I/F chnaged
	
	Revision 1.22  2004/05/03 14:55:34  paoscu
	Paramer "id" removed in method "remove"
	
	Revision 1.21  2004/04/13 16:57:08  paoscu
	ThreadSafe::Lock used.
	clobe() method added.
	
	Revision 1.20  2004/03/04 18:54:33  paoscu
	StoreOntape field added.
		

*/

// This file is automatically generated by dbGenerator tool

#ifndef _dbFileType_H_
#define _dbFileType_H_

#include <acs_c++config.hpp>
#include <exException.h>
#include <dbPersistent.h>


_ACS_BEGIN_NAMESPACE(acs)

class dbCryosatFactory ;

class dbRow ;
class rsResourceSet ;
class XMLOstream ;

//
//
//
// class dbFileType
//
//
//
class dbFileType :
	public dbPersistent
{
public:
	/*! class IllegalValueError declaration */
	exDECLARE_EXCEPTION(FTypePeriodicityException,exCriticalException) ;    // PRQA S 2131, 2153, 2502

	friend class dbCryosatFactory ; // PRQA S 2107

	virtual ~dbFileType() throw() ;
	dbFileType &operator=(const dbFileType &) ; // operator =

	static  std::string staticClassName() ;
	virtual dbPersistent *clone() const ; // PRQA S 2502

	// inherited from dbPersistent
	virtual std::string className() const ;
	virtual void reset() ; // initialize the class
	virtual IdType save(dbConnection &)  ; // save the data in database
	virtual bool load(dbConnection & , IdType id=0)  ; // load the class from the database. Return true if obect exist
	virtual IdType update(dbConnection &)  ; // update an existing instance in database
	virtual IdType remove(dbConnection &)  ; // remove the class from the database // PRQA S 2502
	virtual bool validate() const  ; // True if the class have valid parameters, false otherwise
	virtual void exportObj(rsResourceSet &s) const ; // export the class to rsResourceSet
	virtual void importObj(rsResourceSet &s)  ; // import the class from a rsResourceSet
	virtual void exportXML(XMLOstream &xst) const ; // export the class to XML stream
	int loadRow(const dbRow &, int offset=0) ;

	void setFileType(const std::string &) ;
	const std::string &getFileType(bool *set=0) const ;
	void unsetFileType();
#ifdef PDS_OLD_SCHEMA
	void setUserFileType(const std::string &) ;
	const std::string &getUserFileType(bool *set=0) const ;
	void unsetUserFileType();
#endif
	void setDescription(const std::string &) ;
	const std::string &getDescription(bool *set=0) const ;
	void unsetDescription();

	void setNameRegularExpression(const std::string &) ;
	const std::string &getNameRegularExpression(bool *set=0) const ;
	void unsetNameRegularExpression();

#ifdef PDS_OLD_SCHEMA
	void setGenerateHeader(bool) ;
	bool getGenerateHeader(bool *set=0) const ;
	void unsetGenerateHeader();
#endif
	void setHeaderSeparation(bool) ;
	bool getHeaderSeparation(bool *set=0) const ;
	void unsetHeaderSeparation();

#ifdef PDS_OLD_SCHEMA
	void setHeaderGenerator(const std::string &) ;
	const std::string &getHeaderGenerator(bool *set=0) const ;
	void unsetHeaderGenerator();

	void setInventoryExecutable(const std::string &) ;
	const std::string &getInventoryExecutable(bool *set=0) const ;
	void unsetInventoryExecutable();

	void setInventoryExecutableOpts(const std::string &) ;
	const std::string &getInventoryExecutableOpts(bool *set=0) const ;
	void unsetInventoryExecutableOpts();
#endif
	void setGroup(const std::string &) ;
	const std::string &getGroup(bool *set=0) const ;
	void unsetGroup();

#ifdef PDS_OLD_SCHEMA
	void setPackage(bool) ;
	bool getPackage(bool *set=0) const ;
	void unsetPackage();

	void setOnlineLatencyTime(int) ;
	int getOnlineLatencyTime(bool *set=0) const ;
	void unsetOnlineLatencyTime();

	void setHeaderTemplatePrefix(const std::string &) ;
	const std::string &getHeaderTemplatePrefix(bool *set=0) const ;
	void unsetHeaderTemplatePrefix();

	void setStorage(const std::string &) ;
	const std::string &getStorage(bool *set=0) const ;
	void unsetStorage();

	void setOverallLifeTime(int) ;
	int getOverallLifeTime(bool *set=0) const ;
	void unsetOverallLifeTime();

	void setPreInventoryExecutable(const std::string &) ;
	const std::string &getPreInventoryExecutable(bool *set=0) const ;
	void unsetPreInventoryExecutable();

	void setPreInventoryExecutableOpts(const std::string &) ;
	const std::string &getPreInventoryExecutableOpts(bool *set=0) const ;
	void unsetPreInventoryExecutableOpts();

	void setStoreOnTape(bool) ;
	bool getStoreOnTape(bool *set=0) const ;
	void unsetStoreOnTape();
#endif

	void setInventoryPeriod(int) ;
	bool getInventoryPeriod(bool *set=0) const ;
	void unsetInventoryPeriod();

	void setMngSngExt(bool) ;
	bool getMngSngExt(bool *set=0) const ;
	void unsetMngSngExt();

	void setSngExt(const std::string &) ;
	const std::string &getSngExt(bool *set=0) const ;
	void unsetSngExt();

	void setHdrExt(const std::string &) ;
	const std::string &getHdrExt(bool *set=0) const ;
	void unsetHdrExt();

	void setDblExt(const std::string &) ;
	const std::string &getDblExt(bool *set=0) const ;
	void unsetDblExt();

	static std::string getFields() ;
	static std::string getTable() ;
	static std::string getOrderBy() ;

	// output to stream
	virtual void writeTo(std::ostream &) const ;
	virtual void writeTo(exostream &) const ;

	static void checkPeriodicity(dbConnection &conn, const std::string &fname, const std::string &fversion, const std::string &ftype, const std::vector<std::string> &mailRecs, size_t minExpected=1) ;
	static void getAssociatedSatellites(dbConnection &conn, const std::string &ftype, std::vector<std::string> &) ;

protected:
	dbFileType() ;
	dbFileType(const dbFileType &) ;


private:
	std::string _fileType ;
	bool _fileTypeSet ;

#ifdef PDS_OLD_SCHEMA
	std::string _userFileType ;
	bool _userFileTypeSet ;
#endif
	std::string _description ;
	bool _descriptionSet ;

	std::string _nameRegularExpression ;
	bool _nameRegularExpressionSet ;

#ifdef PDS_OLD_SCHEMA
	bool _generateHeader ;
	bool _generateHeaderSet ;
#endif
	bool _headerSeparation ;
	bool _headerSeparationSet ;

#ifdef PDS_OLD_SCHEMA
	std::string _headerGenerator ;
	bool _headerGeneratorSet ;

	std::string _inventoryExecutable ;
	bool _inventoryExecutableSet ;

	std::string _inventoryExecutableOpts ;
	bool _inventoryExecutableOptsSet ;
#endif
	std::string _group ;
	bool _groupSet ;

#ifdef PDS_OLD_SCHEMA
	bool _package ;
	bool _packageSet ;

	int _onlineLatencyTime ;
	bool _onlineLatencyTimeSet ;

	std::string _headerTemplatePrefix ;
	bool _headerTemplatePrefixSet ;

	std::string _storage ;
	bool _storageSet ;

	int _overallLifeTime ;
	bool _overallLifeTimeSet ;

	std::string _preInventoryExecutable ;
	bool _preInventoryExecutableSet ;

	std::string _preInventoryExecutableOpts ;
	bool _preInventoryExecutableOptsSet ;

	bool _storeOnTape ;
	bool _storeOnTapeSet ;
#endif
	int _inventoryPeriod ;
	bool _inventoryPeriodSet ;

	bool _mngSngExt ;
	bool _mngSngExtSet ;

	std::string _sngExt ;
	bool _sngExtSet ;

	std::string _hdrExt ;
	bool _hdrExtSet ;

	std::string _dblExt ;
	bool _dblExtSet ;

	ACS_CLASS_DECLARE_DEBUG_LEVEL(dbFileType)
} ;


_ACS_END_NAMESPACE

#endif // _dbFileType_H_

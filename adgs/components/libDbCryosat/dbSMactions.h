// PRQA S 1050 EOF
/*

	Copyright 1995-2014, Advanced Computer Systems , Inc.
	Via Della Bufalotta, 378 - 00139 Roma - Italy
	http://www.acsys.it

	All Rights Reserved.

	This is UNPUBLISHED PROPRIETARY SOURCE CODE of Advanced Computer Systems;
	the contents of this file may not be disclosed to third parties, copied or
	duplicated in any form, in whole or in part, without the prior written
	permission of Advanced Computer Systems, Inc.

	$Prod: $

	$Id$

	$Author$

	$Log$
	Revision 6.0  2016/07/07 13:44:04  damdec
	CSGACQ-82: special queries modified to be compatible with Oracle
	
	Revision 5.4  2016/04/28 09:50:34  marpas
	interface fixed for SMID type
	
	Revision 5.3  2016/04/19 13:53:47  marpas
	coding best practice application in progress
	useless virtual filedName method removed
	
	Revision 5.2  2016/04/18 15:22:52  marpas
	coding best practices application in progress
	
	Revision 5.1  2016/03/26 21:42:50  marpas
	using new db I/F
	
	Revision 5.0  2015/02/17 11:25:26  marfav
	Field unique_id added to table t_smactions
	
	Revision 4.1  2014/12/11 12:18:22  marpas
	coding best practices and warning remotion
	
	Revision 4.0  2013/09/30 12:31:03  marpas
	the following classes have been removed:
	dbDistributionPolicy
	dbDistributionPolicyQuery
	dbIORepository
	dbIORepositoryQuery
	dbReceptionPolicy
	dbReceptionPolicyQuery
	
	Revision 3.0  2013/09/19 14:57:31  marfav
	dbSMactions now include inventory id pointers
	
	Revision 1.4  2013/03/29 19:51:30  marpas
	removing html related functions
	
	Revision 1.3  2012/02/14 12:52:50  marpas
	 refactoring and introducing dbInventory::uniqueId
	
	Revision 1.2  2009/01/27 12:28:20  crivig
	added enddate field
	
	Revision 1.1  2008/10/20 09:38:07  crivig
	source code added
	
	
	
*/

// This file is automatically generated by dbGenerator tool

#ifndef _dbSMactions_H_
#define _dbSMactions_H_

#include <exException.h>
#include <dbSmartPersistent.h>
#include <DateTime.h>

#include <string>

namespace acs {

class dbCryosatFactory ;

class dbRow ;
class rsResourceSet ;
class XMLOstream ;


//
//
//
// class dbSMactions
//
//
//
class dbSMactions : public dbSmartPersistent // PRQA S 2109, 2153
{
	friend class dbCryosatFactory ; // PRQA S 2107
public:

	virtual ~dbSMactions() throw() ;
	dbSMactions &operator=(const dbSMactions &) ; // operator =

	static  std::string staticClassName() ;
	virtual dbPersistent *clone() const ; // PRQA S 2502

	// inherited from dbPersistent
	virtual std::string className() const ;

	virtual void exportObj(rsResourceSet &s) const ; // export the class to rsResourceSet
	virtual void importObj(rsResourceSet &s)  ; // import the class from a rsResourceSet
	virtual void exportXML(XMLOstream &xst) const ; // export the class to XML stream

	void setSMId(IdType, dbConnection &) ;
	IdType getSMId(bool &set, dbConnection &) const ;
	void unsetSMId();

	void setPackageId(IdType, dbConnection &) ;
	IdType getPackageId(bool &set, dbConnection &) const ;
	void unsetPackageId();

	void setFileName(const std::string &, dbConnection &) ;
	std::string getFileName(bool &set, dbConnection &) const ;
	void unsetFileName();

	void setFileVersion(const std::string &, dbConnection &) ;
	std::string getFileVersion(bool &set, dbConnection &) const ;
	void unsetFileVersion();

	void setOperation(const std::string &, dbConnection &) ;
	std::string getOperation(bool &set, dbConnection &) const ;
	void unsetOperation();

	void setCreationDate(const DateTime &, dbConnection &) ;
	const DateTime getCreationDate(bool &set, dbConnection &) const ;
	void unsetCreationDate();

	void setEndDate(const DateTime &, dbConnection &) ;
	const DateTime getEndDate(bool &set, dbConnection &) const ;
	void unsetEndDate();

    void setInventoryId (IdType, dbConnection &) ;
	IdType getInventoryId (bool &set, dbConnection &) const ;
    void unsetInventoryId ();

    void setUniqueId (const std::string&, dbConnection &) ;
    std::string getUniqueId (bool &set, dbConnection &) const ;
    void unsetUniqueid() ;

	static std::string getFields() ;
	static std::string getTable() ;

	std::string download(const std::string &path, dbConnection &conn) const ;
	
protected:
	explicit dbSMactions(dbConnection &) ;
	dbSMactions(const dbSMactions &) ;
private:
    dbSMactions() ; // not implemented
} ;


} // namespace

#endif // _dbSMactions_H_

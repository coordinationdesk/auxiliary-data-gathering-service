/*

	Copyright 1995-2016, Advanced Computer Systems , Inc.
	Via Della Bufalotta, 378 - 00139 Roma - Italy
	http://www.acsys.it

	All Rights Reserved.

	This is UNPUBLISHED PROPRIETARY SOURCE CODE of Advanced Computer Systems;
	the contents of this file may not be disclosed to third parties, copied or
	duplicated in any form, in whole or in part, without the prior written
	permission of Advanced Computer Systems, Inc.

	$Prod: A.C.S. Db Space Library $

	$Id$

	$Author$

	$Log$
	Revision 1.25  2016/04/11 13:26:34  marpas
	new db interface adopted
	coding best practices applied
	
	Revision 1.24  2016/03/26 21:44:07  marpas
	using new db I/F
	
	Revision 1.23  2014/02/11 11:03:53  marpas
	refresh method removed - base class is enough
	
	Revision 1.22  2013/03/29 19:51:08  marpas
	removing html related functions
	
	Revision 1.21  2012/11/19 14:16:56  marpas
	HEAD REALIGNEMENT
	
	Revision 1.19  2012/02/13 16:50:12  marpas
	refactoring in progress
	
	Revision 1.18  2011/03/02 18:19:58  marpas
	serial 8 supported on load too
	
	Revision 1.17  2011/03/02 18:00:09  marpas
	serial 8 support
	
	Revision 1.16  2005/06/17 14:09:41  marpas
	std namespace management fixed
	
	Revision 1.15  2004/07/07 10:30:19  marpas
	dbPersistent I/F changed
	
	Revision 1.14  2004/05/03 14:15:04  marpas
	dbPersistent::remove I/F changed
	
	Revision 1.13  2004/04/13 15:05:16  marpas
	ace dependencies removed
	dbPersistent::clone method implemented
	dbGeneralQuery::clone method implemented
	XXXQuery::operator= implemented
	
	Revision 1.12  2004/02/04 10:13:22  paoscu
	dbPersistent interface changed.
		

*/

// This file is automatically generated by dbGenerator tool

#ifndef _dbSatellite_H_
#define _dbSatellite_H_

#include <exException.h>
#include <dbPersistent.h>


_ACS_BEGIN_NAMESPACE(acs)

class dbRow ;
class rsResourceSet ;
class XMLOstream ;

//
//
//
// class dbSatellite
//
//
//
class dbSatellite :
	public dbPersistent
{
public:
	friend class dbSpaceFactory ; // PRQA S 2107

	virtual ~dbSatellite() throw() ;
	dbSatellite &operator=(const dbSatellite &) ; // operator =

	virtual dbPersistent *clone() const ; // PRQA S 2502
	
	static  std::string staticClassName() ;

	// inherited from dbPersistent
	virtual std::string className() const ;
	virtual void reset() ; // initialize the class
	virtual IdType save(dbConnection &)  ; // save the data in database
	virtual bool load(dbConnection & , IdType id=0)  ; // load the class from the database. Return true if obect exist
	virtual IdType update(dbConnection &)  ; // update an existing instance in database
	virtual IdType remove(dbConnection &)  ; // remove the class from the database // PRQA S 2502
	virtual bool validate() const  ; // True if the class have valid parameters, false otherwise
	virtual void exportObj(rsResourceSet &s) const ; // export the class to rsResourceSet
	virtual void importObj(rsResourceSet &s)  ; // import the class from a rsResourceSet
	virtual void exportXML(XMLOstream &xst) const ; // export the class to XML stream

	int loadRow(const dbRow &, int offset=0) ;

	void setSatelliteId(int) ;
	int getSatelliteId(bool *set=0) const ;
	void unsetSatelliteId();

	void setSatelliteName(const std::string &) ;
	const std::string &getSatelliteName(bool *set=0) const ;
	void unsetSatelliteName();

	void setSatelliteAcronym(const std::string &) ;
	const std::string &getSatelliteAcronym(bool *set=0) const ;
	void unsetSatelliteAcronym();

	static std::string getFields() ;
	static std::string getTable() ;
	static std::string getOrderBy() ;

	// output to stream
	virtual void writeTo(std::ostream &) const ;
	virtual void writeTo(exostream &) const ;


protected:
	dbSatellite() ;
	dbSatellite(const dbSatellite &) ;


private:
	int _satelliteId ;
	bool _satelliteIdSet ;

	std::string _satelliteName ;
	bool _satelliteNameSet ;

	std::string _satelliteAcronym ;
	bool _satelliteAcronymSet ;

	ACS_CLASS_DECLARE_DEBUG_LEVEL(dbSatellite)
} ;


_ACS_END_NAMESPACE

#endif // _dbSatellite_H_

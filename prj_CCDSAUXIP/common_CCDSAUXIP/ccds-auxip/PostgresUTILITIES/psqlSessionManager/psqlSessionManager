#!/bin/sh
#
# Copyright 2010-2020, Advanced Computer Systems , Inc.
# Via Della Bufalotta, 378 - 00139 Roma - Italy
# http://www.acsys.itA.C.S. - Advanced Computer Systems S.p.A.
# 
# This is UNPUBLISHED PROPRIETARY SOURCE CODE of Advanced Computer Systems, S.p.A.;
# the contents of this file may not be disclosed to third parties, copied or
# duplicated in any form, in whole or in part, without the prior written
# permission of Advanced Computer Systems, S.p.A.
#	
#
#   $Prod: A.C.S. Postgres Sessions Manager script $
#
#	$Id$
#
#	$Author$
#
#	$Log$
#	Revision 1.1.1.1  2015/06/17 10:17:21  achnat
#	Import psqlSessionManager
#	





usage() {
	echo "usage: $(basename $0) <parameters> <actions> [[options]...]"
	echo $dashLine
	echo "parameters:"
	echo "   -p <project>   Use connection parameters of a specific project"
	echo "   -z             No project. Insert connection parameters manually"
	echo "                  when requested"
	echo "actions:"
	echo "   -k <pid>|all   Kill the session having the specific pid or all" 
	echo "                  sessions connected to specified database"
	echo "   -s             Show all sessions connected to the specified psql"
	echo "                  server (identified by host)"
	echo "options:"
	echo "   -o <file>      Redirect output into a file (only with -s action)"
	echo "   -h             Show this help and exit"
	echo $dashLine
	echo ""
	exit 1
}


res_msg() {
	case "$1" in
		'0')
			echo_success
			echo ""
			;;
		'1')
			echo_failure
			echo ""
			;;
		'2')
			echo_warning
			echo ""
			;;
		+ )
			;;
	esac
}


clean() {
	if test -e $SQL_FILE; then rm -f $SQL_FILE; fi
	if test -e $RES_FILE; then rm -f $RES_FILE; fi
}


exit_error() {
	echo "" >> $LOG_FILE
	echo $dashLine | tee -a $LOG_FILE
	echo "*** $ACTION ABORTED ***" | tee -a $LOG_FILE
	echo "See log file $LOG_FILE"
	echo "" | tee -a $LOG_FILE
	clean
	exit 1
}


init_file() {
	if ! test -e $2
	then
		touch $2
		if [ "$?" != 0 ]
		then
			echo "*** ERROR!!! init_file() - Cannot create $1 file ***"
			echo "trying to write: $2"
			echo ""
			exit 1
		fi
		chmod a+w $2
	fi
	
	case $1 in
		'log')
			echo "" >> $2
			echo "" >> $2
			echo "###################################################################" >> $2
			echo "# $(date)" >> $2
			echo "###################################################################" >> $2
			;;
		* )
			echo "" > $2
			;;
	esac
}


set_conf() {
	if test -r "$CONF_FILE"
	then
		. $CONF_FILE

		export DBHOSTNAME
		export DBNAME
		export DBAUSER
	else
		echo "*** Cannot find CONF file or it is not readable ***" | tee -a $LOG_FILE
		echo "expected file: $CONF_FILE"
		exit_error
	fi
}


check_insert() {
	toAnalize="$2"
	
	while test -z "$toAnalize"
	do
		echo -n "Insert postgres $1 name: "
		read toAnalize
	done
	
	export validated="$toAnalize"
}


insert_param() {
	case $1 in
		'srv' )
			echo -n "Insert postgres host name: "
			read val
			check_insert host $val
			export DBHOSTNAME="$validated"
			;;
		'usr' )
			echo -n "Insert postgres superuser name: "
			read val
			check_insert user $val
			export DBAUSER="$validated"
			;;
		'db' )
			echo -n "Insert postgres database name: "
			read val
			check_insert database $val
			export DBNAME="$validated"
			;;
		* ) 
			;;
	esac
}


exe_qry() {
	echo "executing query ..." >> $LOG_FILE
	
	if [ "$o_flag" = "T" ]
	then
		echo -n "executing query ..."
		psql -h $DBHOSTNAME -U $DBAUSER $DBNAME -c "\i $SQL_FILE" 2>> $LOG_FILE 1> $out_file
		res="$?"
		res_cmd="res_msg 0"
	else
		if [ "$k_flag" = "T" ]
		then
			echo -n "executing query ..."
			psql -h $DBHOSTNAME -U $DBAUSER $DBNAME -c "\i $SQL_FILE" >> $LOG_FILE 2>&1
			res="$?"
			res_cmd="res_msg 0"
		else
			psql -h $DBHOSTNAME -U $DBAUSER $DBNAME -c "\i $SQL_FILE" 2>> $LOG_FILE
			res="$?"
			res_cmd="echo"
		fi
	fi
	
	if [ "$res" != 0 ]
	then
		res_msg 1
		echo "*** ERROR: Error during query execution ***" | tee -a $LOG_FILE
		exit_error
	fi
	
	$res_cmd
	echo ">> query executed successfully." >> $LOG_FILE
}




################################   MAIN   ################################
##########################################################################

# Source function library
. /etc/rc.d/init.d/functions

export dashLine="-------------------------------------------------------------------"
echo ""
echo "POSTGRES SESSIONS MANAGER"
echo $dashLine

export EXE_DIR=`dirname $0`
cd $EXE_DIR
export EXE_DIR=`pwd`

cd ..
export BASE_DIR=`pwd`
cd $EXE_DIR

export CONF_DIR=$BASE_DIR/psqlUtilitiesConf
export COMM_LIBS=$BASE_DIR/psqlUtilitiesLibs

export LOG_FILE=/tmp/$(basename $0).log
export SQL_FILE=/tmp/$(basename $0)_tempCmd.sql
export RES_FILE=/tmp/$(basename $0)_tempResult.res

export k_flag="F"
export o_flag="F"
export p_flag="F"
export s_flag="F"
export z_flag="F"

while getopts ":k:o:p:hsz" opt 
do 
	case "${opt}" in 
		k) 
			export k_flag="T"
			export k_pid=${OPTARG}
			export ACTION="KILL"
			;;
		o) 
			export o_flag="T"
			export out_file=${OPTARG}
			;;
		p) 
			export p_flag="T"
			export prj=${OPTARG}
			;;
		s) 
			export s_flag="T"
			export ACTION="ANALYSIS"
			;;
		z) 
			export z_flag="T"
			;;
		h) 
			usage 
			;;
		*) 
			usage 
			;;
	esac 
done

if [ "$p_flag" = "F" ] && [ "$z_flag" = "F" ]; then usage; fi
if [ "$p_flag" = "T" ] && [ "$z_flag" = "T" ]; then usage; fi
if [ "$k_flag" = "F" ] && [ "$s_flag" = "F" ]; then usage; fi
if [ "$k_flag" = "T" ] && [ "$s_flag" = "T" ]; then usage; fi

if [ "$k_flag" = "T" ] && ! [[ "$k_pid" =~ ^[0-9]+$ ]]
then
	if [ "$k_pid" != "all" ]
	then
		echo "*** ERROR!!! Invalid input value ***"
		echo "When you use the \"-k\" option the values admitted are only integers"
		echo "or the string \"all\""
		echo ""
		exit 1
	fi
fi

clean

init_file log $LOG_FILE
init_file sql $SQL_FILE
init_file res $RES_FILE

if [ "$p_flag" = "T" ]
then
	export CONF_FILE=$CONF_DIR/$prj.conf
	set_conf
else
	insert_param srv
	insert_param db
	insert_param usr
fi

if test -z "$PGPASSWORD"
then
	echo -n "Insert $DBAUSER password: "
	read -s answer
	export PGPASSWORD=$answer
	echo ""
fi

if [ "$s_flag" = "T" ]
then
	echo "\x \\\\SELECT * FROM pg_stat_activity ORDER BY datname ;" > $SQL_FILE
else
	if [ "$k_pid" != "all" ]
	then
		echo "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid = $k_pid ;" > $SQL_FILE
	else
		echo "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname = '$DBNAME' ;" > $SQL_FILE
	fi
fi

exe_qry

echo $dashLine | tee -a $LOG_FILE
echo ">> $ACTION COMPLETED" | tee -a $LOG_FILE
if [ "$s_flag" = "T" ] && [ "$o_flag" = "F" ]
then
	echo "NOTE: The formatting for the standard output could be incorrect."
	echo "      Use the \"-o\" option to redirect output into a file"
fi
echo "" | tee -a $LOG_FILE
clean
exit 0




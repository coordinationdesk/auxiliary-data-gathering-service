#!/bin/sh
#
# Copyright 1995-2005, Advanced Computer Systems , Inc.
# Via Della Bufalotta, 378 - 00139 Roma - Italy
# http://www.acsys.itA.C.S. - Advanced Computer Systems S.p.A.
# 
# This is UNPUBLISHED PROPRIETARY SOURCE CODE of Advanced Computer Systems, S.p.A.;
# the contents of this file may not be disclosed to third parties, copied or
# duplicated in any form, in whole or in part, without the prior written
# permission of Advanced Computer Systems, S.p.A.
#	
#
#   $Prod: A.C.S. Vacuum tables procedure $
#
#	$Id$
#
#	$Author$
#
#	$Log$
#	Revision 1.4  2013/12/10 11:12:11  achnat
#	Changed log name for multi-db platforms
#	
#	Revision 1.3  2013/09/26 15:00:58  achnat
#	Modified for crontab execution.
#	
#	Revision 1.2  2009/09/24 12:57:47  achnat
#	Added log file.
#	
#	Revision 1.1  2009/09/23 09:56:31  achnat
#	Added vacuumTables.
#	








exit_error() {
	echo "" >> $LOG_FILE
	echo "--------------------------------------------------------------------" | tee -a $LOG_FILE
	echo "*** VACUUM ABORTED ***" | tee -a $LOG_FILE
	echo "See log file $LOG_FILE"
	echo "" | tee -a $LOG_FILE
	exit 1
}


va_usage() {
	echo "usage: vacuumTables <hostname> <dbauser> <dbname> <schema> [option]"
	echo "--------------------------------------------------------------------"
	echo "schemas list:"
	echo "   -a | --all         vacuum all db tables"
	echo "   -c | --catalogue   vacuum CATALOGUE schema tables"
	echo "   -i | --ism         vacuum ISM schema tables"
	echo "   -p | --pds         vacuum PDS schema tables"
	echo ""
	echo "options list:"
	echo "   -f | --full        full vacuum (tables will be locked)"
	echo "--------------------------------------------------------------------"
	echo ""
	exit 1
}


vacuum() {
	echo "Vacuum tables:" | tee -a $LOG_FILE
	sleep 1
	for i in `cat $LIST_FILE`
	do
		if [ "$FULL" == 1 ]
		then
			echo -n "   vacuum $i in full mode ..."
			if [ "$DBAUSR" != 'postgres' ]
			then
				psql -h $HNAME -U $DBAUSR $DBNAME -v "ON_ERROR_STOP=1" -c "VACUUM FULL VERBOSE ANALYZE $i;" >> $LOG_FILE 2>&1
				res="$?"
			else
				psql $DBNAME -v "ON_ERROR_STOP=1" -c "VACUUM FULL VERBOSE ANALYZE $i;" >> $LOG_FILE 2>&1
				res="$?"
			fi
		else
			echo -n "   vacuum $i in not full mode ..."
			if [ "$DBAUSR" != 'postgres' ]
			then
				psql -h $HNAME -U $DBAUSR $DBNAME -v "ON_ERROR_STOP=1" -c "VACUUM VERBOSE ANALYZE $i;" >> $LOG_FILE 2>&1
				res="$?"
			else
				psql $DBNAME -v "ON_ERROR_STOP=1" -c "VACUUM VERBOSE ANALYZE $i;" >> $LOG_FILE 2>&1
				res="$?"
			fi
		fi
		
		if [ "$res" != 0 ]
		then
			result_message 1
			rndxCount=rndxCount+1
		else
			result_message 0
		fi
	done
}





########## MAIN ##########

echo ""
echo "VACUUM TABLES"
echo "--------------------------------------------------------------------"

export EXE_DIR=`dirname $0`
cd $EXE_DIR
export EXE_DIR=`pwd`

# Check first option
if test "$1" = "help" || test "$1" = "--help"
then
	va_usage
fi

if test -z "$4"
then
	va_usage
fi

export HNAME=$1
export DBAUSR=$2
export DBNAME=$3
export SCHEMA=$4

export LIB_DIR=$EXE_DIR/lib
export LOG_FILE="$EXE_DIR/logs/vacuumTables_$DBNAME.log"
export LIST_FILE=/tmp/psqlVacuumTableList_$DBNAME.txt

typeset -i rndxCount
rndxCount=0

# Source function library
. /etc/rc.d/init.d/functions
. $LIB_DIR/commonFunctions

clean $LIST_FILE
init_log $LOG_FILE VACUUM

case "$5" in
	'-f' | '--full' )
		export FULL=1 ;;
	* )
		export FULL=0 ;;
esac

if test -z "$PGPASSWORD" && [ "$DBAUSR" != 'postgres' ]
then
	echo -n "Insert $DBAUSR password: "
	read -s answer
	export PGPASSWORD=$answer
	echo ""
	echo ""
fi

# Check db connection
check_conn

# Check object option and go
case "$SCHEMA" in
	'-a' | '--all' )
		dump_list
		;;
	'-c' | '--catalogue' )
		dump_list "c_"
		;;
	'-i' | '--ism' )
		dump_list "ism_"
		;;
	'-p' | '--pds' )
		dump_list "t_"
		;;
	* )
		va_usage
		;;
esac

vacuum
clean $LIST_FILE

echo "-------------------------------------------------------------------" | tee -a $LOG_FILE
if (( "$rndxCount" > 0 ))
then
	echo ">> $rndxCount errors occurred." | tee -a $LOG_FILE
	echo "See log file $LOG_FILE"
	echo ""
	exit 1
else
	echo ">> vacuum successfully completed." | tee -a $LOG_FILE
	echo "" >> $LOG_FILE
	echo "" >> $LOG_FILE
fi

echo ""
exit 0



*
* Statements inside a compound block are indented by this category
$cmpd-member
stmt-seq -> /n/i0 label-stmt, /n/i0 switch-label-stmt, /n/i1 stmt

*
* Statements inside a class body are indented by this category 
$class-member
class-member-node -> /n/i0 memb-access-class, /n/i1 tmpl-decl, /n/i1 memb-func-defn, 
                      /n/i1 decl-stmt, /n/i1 using-decl-stmt, /n/i1 opaque-enum-spec

*
* block declarations (handles constructs with braces in global scope)
* spacing for these is defined inside each referenced rule
$block-definition
  class-definition -> class-def, anonymous-class-def
  func-definition -> func-defn, delayed-func-defn, defdel-func-defn
  enum-definition -> enum-spec, opaque-enum-spec

*
* Statements inside an enum body are indented by this category  
$enum-member
enum-list = /n/i1 enum-def-list [ ',' | ]

$misc
  expr-list = expr-list ',' expr
  expr-list -> expr 

  template-arg-list = template-arg-list ',' template-arg 
  template-arg-list -> template-arg

  base-spec-list = base-spec-list ',' base-spec 
  base-spec-list -> base-spec

  catch-list = catch-list /n/i0 catch-stmt
  catch-list -> catch-stmt

  tmpl-param-list = tmpl-param-list /s0 ',' /s1 tmpl-param
  tmpl-param-list -> tmpl-param
  tmpl-param -> tmpl-tmpl-param, type-param

  enum-def-list = [ enum-def-list ',' /n/i0 def-enum | def-enum ]
  def-enum = [ 'identifier' '=' expr | 'identifier' ]

  aggr-init-clause = aggr-init-list [ ',' | ] 
  aggr-init-list = aggr-init-list ',' expr
  aggr-init-list -> expr

$class
  class-def = 'class|struct|etc' name [ base-clause | ] /n/i0 
              '{' [ dlay-stmt-block /n/i0 '}' | (/n/i0|/s) '}' ] 
  anonymous-class-def = 'class' [ base-clause | ] /n/i0 '{' [ dlay-stmt-block /n/i0 '}' | (/n/i0|/s) '}' ] 

* 
* Rules in class-misc related to classes too, but we don't want to try them 
* unless we explicitly list them
$class-misc 
  memb-access-class = 'public | protected | private' ':'

  memb-func-defn = func-definition [ ';' | ]
  memb-func-defn -> func-definition

  * func-defn is a function with a definition, not a function declaration (that's a decl-stmt!)
  delayed-func-defn = declaration (/n/i0|/n/i1|/s1) dlay-fn-body-block
  defdel-func-defn = declaration '=' 'default' ';'
  func-defn = declaration /n/i0 '{' [ dlay-fn-body-block | ] /n/i0 '}'
  func-defn -> asm-func

  base-clause = ':' base-spec-list
  base-spec = [ 'access-spec|virtual' 'virtual' name 
                | 'access-spec' name 
                | name ] 

  template-arg -> abstract-declaration, object-name, expr 

$stmt
  break-stmt = 'break' ';'
  cmpd-stmt = '{' [ stmt-seq /n/i0 '}' | (/n/i0|/s) '}' ]
  continue-stmt = 'continue' ';'
  decl-stmt = [ decl ';' | ';' ]
  opaque-enum-spec = enum-key name [ enum-base | ] ';'
  expr-stmt = [ expr ';' | ';' ]
  goto-stmt = 'goto' [ name | 'identifier' ] ';'
  return-stmt = 'return' [ expr | ] ';'
  try-catch-stmt = 'try' /n/i0 cmpd-stmt /n/i0 catch-list

  switch-stmt = 'switch' '(' expr ')' 
            [ /n/i0 cmpd-stmt | /n/i1 stmt ]

  switch-label-stmt = switch-label (/s0|/s1) ':'  
            [ (/n/i0|/n/i1) cmpd-stmt | /n/i0 label-stmt | /n/i0 switch-label-stmt | /n/i1 stmt ]

  label-stmt = 'label' ':' 
            [ (/n/i0|/n/i1) cmpd-stmt | /n/i0 label-stmt | /n/i0 switch-label-stmt | /n/i1 stmt ]

  do-stmt = 'do' 
            [ /n/i0 cmpd-stmt (/n/i0|/s) 'while' | /n/i1 stmt /n/i0 'while' ] '(' expr ')' ';' 

  for-stmt = 'for' '(' 
            [ expr-stmt  | decl-stmt ]
            [ expr ';' | ';' ]
            [ expr ')' | ')' ]
            [ /n/i0 cmpd-stmt | /n/i1 stmt ]

  if-stmt = 'if' '(' [ expr | decl '=' expr ] ')' 
            [ /n/i0 cmpd-stmt | /n/i1 stmt ] 
            [ /n/i0 'else' /s if-stmt 
              | /n/i0 'else' /n/i0 cmpd-stmt 
              | /n/i0 'else' /n/i1 stmt 
              | ] 

  while-stmt = 'while' '(' [ expr | decl '=' expr ] ')' 
            [ /n/i0 cmpd-stmt | /n/i1 stmt ]

  using-decl-stmt = 'using' /s1 name (/s0|/s1) ';'
  using-dirc-stmt = 'using' /s1 'namespace' /s1 name (/s0|/s1) ';'

  asm-stmt = '@'

* 
* Rules in stmt-misc are related to statement too, but we don't want to try them 
* unless we explicitly reference them
$stmt-misc
  asm-func = '@'
  catch-stmt = 'catch' '(' [ decl | '...' ] ')' /n/i0 cmpd-stmt
  switch-label = [ 'case' /s1 expr | 'default' ]
  block = '@'
  dlay-stmt-block -> block
  dlay-expr-block -> block
  dlay-fn-body-block -> block

*
* all the expressions go here
$expr
  assign-expr = expr '=' expr
  arith-expr = expr 'operator' expr
  binary-oper-expr = expr 'binary-oper' expr
  cast-expr = 'cast-type' '<' abstract-declaration '>' '(' expr ')'
  c-cast-expr = '(' abstract-declaration ')' [ paren-expr | expr ]
  comma-expr = expr ',' expr
  unary-expr = 'operator' [ expr | name ] 
  this-expr = '@'
  sizeof-expr = [ 'sizeof' expr | 'sizeof' '(' abstract-declaration ')' ] 
  throw-expr = [ 'throw' expr | 'throw' ]
  typeid-expr = 'typeid' '(' [ expr | abstract-declaration ] ')'
  id-expr = name
  literal-expr = '@'
  paren-expr = '(' expr ')'
  postinc-expr = expr 'operator' 
  ptr-memb-expr = expr '.* .->' expr
  array-expr = expr '[' expr ']'
  fncall-expr = expr '(' [ expr-list | ] ')'
  rel-expr = expr 'rel-oper' expr
  shift-expr = expr '<< | >>' expr
  ternary-expr = expr '?' expr ':' expr
  truth-expr = expr '&&||&|^' expr

  new-expr = [ '::' 'new' | 'new' ] 
           [ new-placement-expr | ] 
           [ abstract-declaration | '(' abstract-declaration ')' ]
           [ new-init-expr | ]

  delete-expr = [ '::' 'delete' | 'delete' ] 
              [ '[' ']' expr | '[' expr ']' expr | expr ]

  simple-init-expr = decl-spec-seq '(' 
            [ expr-list | ] 
            ')' 

  aggr-init = '{' [ aggr-init-clause | ] '}'

*
* rules closely related to expr but dont belong in expr category
$expr-misc
  new-init-expr = '(' [ expr-list | ] ')'
  new-placement-expr = '(' [ expr-list | ] ')'

*
* declarations
$decl
  declaration-seq = declaration-seq ',' declaration
  declaration-seq -> declaration

  declaration = decl-spec-seq [ ptr-oper-declarator | declarator ]
  declaration -> assgn-init-decl
  declaration -> aggr-init-decl
  declaration -> fn-init-decl
  declaration -> declarator

  abstract-declaration = [ decl-spec-seq abstract-declarator | decl-spec-seq ]

  assgn-init-decl = decl '=' expr 
  fn-init-decl = decl '(' expr-list ')'
  aggr-init-decl = decl '=' '{' [ aggr-init-clause | ] '}'
  tmpl-decl = 'template' '<' [ tmpl-param-list | ] '>' 
               [ (/n/i0|/s) decl-stmt | (/n/i0|/s) memb-func-defn | (/n/i0|/s) class ]

  decl-spec-seq = decl-spec-seq decl-spec
  decl-spec-seq -> decl-spec

*
* rules closely related to decl but dont belong in decl category
$decl-misc
  decl-spec = 'decl-spec'
  decl-spec -> enum-spec, friend-spec, elab-type-spec, class-def, anonymous-class-def, user-type-name

  cv-spec-seq = cv-spec-seq cv-spec
  cv-spec-seq -> cv-spec
  cv-spec = '@'
  friend-spec = '@'
  enum-spec = enum-key [ name | ] [ enum-base | ] /n/i0 '{' [ dlay-stmt-block /n/i0 '}' | (/n/i0|/s0) '}' ]  
  enum-key = 'enum' [ 'class|struct' | ]
  enum-base = ':' abstract-declaration
  elab-type-spec = 'struct | enum | whatever' name 

  type-param = [ 'type-key' | named-type | named-type '=' abstract-declaration ]
  type-param -> param-decl
  tmpl-tmpl-param = 'template' '<' [ tmpl-param-list | ] '>' 
                    'class' [ 'paramname' | ] 
                    [ '=' object-name | ]
  object-name -> full-name, template-name

  throw-spec = 'throw' '(' [ abstract-decl-id-list | '...' | ] ')'
  abstract-decl-id-list = abstract-decl-id-list ',' abstract-declaration
  abstract-decl-id-list -> abstract-declaration 

  param-decl-list = param-decl-list ',' param-decl 
  param-decl-list -> param-decl

  param-decl = param-decl-nodes [ '=' expr | '=' dlay-expr-block | ]
  param-decl-nodes -> declaration, abstract-declaration

*
* Declarators
$declarator
  paren-declarator = '(' declarator ')'
  ptr-oper-declarator = ptr-oper [ ptr-oper-declarator | declarator ] 
  function-decl = function-decl-nodes [ '=' '0' | ]
  
  fn-style-declarator = declarator '(' 
            [ param-decl-list | expr-list | ]  
            [ ',' '...' | '...' | ] ')' 
            [ cv-spec-seq | ] [ throw-spec | ]

  array-declarator = declarator '[' [ expr | ] ']'

  * this is correctly not defined as an equivalent - name is always a child
  * of declarator-id.  
  declarator-id = name

$declarator-misc
  function-decl-nodes -> ptr-oper-declarator, fn-style-declarator
  ptr-oper = [ '*' cv-spec-seq
                | '*'
                | user-type-name '*' cv-spec-seq 
                | user-type-name '*' ]

*
* Abstract declarator
$abstract-declarator
  ptr-oper-abstract-declarator = ptr-oper [ abstract-declarator | ]
  paren-abstract-declarator = '(' abstract-declarator ')'
  fn-style-abstract-declarator = [ abstract-declarator | ] 
        '(' 
          [ param-decl-list | expr-list | ] 
          [ ',' '...' | '...' | ] 
        ')' 
        [ cv-spec-seq | ] [ throw-spec | ]
  array-abstract-declarator = [ abstract-declarator | ] '[' [ expr | ] ']'

*
* names and qualified names
$name
  named-type = 'type-key' 'ident'
  aligned-name = [ name ':' expr | ':' expr ]
  dtor-name = '~' 'identifier'
  qualified-name = [ name '::' | '::' ]
  member-name = [ member-expr | name ] name
  member-dtor-name = [ member-name | member-dtor-name | template-name ] '::' dtor-name
  member-expr = expr [ '.' | '->' ] 
  template-name = name '<' [ template-arg-list | ] '>' 
  member-template-name = member-expr [ 'template' name | name ]   
  object-template-name -> object-template-name1, object-template-name2
  memb-qual-tmpl-name = name idr
  idr = '@'
  full-name = [ qualified-name name | unqualified-name ]
  user-type-name = user-type-name-nodes [ '::' | ]
  conv-operator = 'operator' abstract-declaration
  overload-operator = 'operator' 
                     [ '[' ']' 
                        |  'new-or-delete' '[' ']' 
                        |  'simple-operator' 
                     ]

*
* rules closely related to name but dont belong in expr category
$name-misc
  user-type-name-nodes -> template-name, full-name 
  unqualified-name -> idr, overload-operator, conv-operator, dtor-name
  object-template-name1 = [ qualified-name /s0  unqualified-name | unqualified-name ]  
  object-template-name2 = qualified-name /s0 'template' /s1 unqualified-name

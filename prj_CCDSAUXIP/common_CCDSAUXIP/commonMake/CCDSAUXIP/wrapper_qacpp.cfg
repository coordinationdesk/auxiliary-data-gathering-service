#
# This is the configuration file for the wrapper.
# You need to specify the location of this file to the wrapper by
# setting the environment variable WRAPPER_CONFIG_FILE to be the path
# to this file.
#


#
# Required settings.....
#
# (This example file is configured for QAC++ 2.4 using g++)


#
# COMPILER_SETTINGS_FILE is the compiler personality which configures the 
# analyser for the compiler (REQUIRED)
#
# NB Do not use tilde (~) as part of the path.
#
#COMPILER_SETTINGS_FILE=/opt/qacpp-3.0.1R/gpp_person/g++_v4.4_qacpp2.0.p_c
COMPILER_SETTINGS_FILE=/raid0/pdgs/common/PDGS/g++_v4.4_qacpp2.0.p_c




#
# ANALYSER is set to either QAC or QACPP depending on whether you are using
# qac or qac++ (REQUIRED)
#
ANALYSER=QACPP


#
# ANALYSER_BASE is set to the location where the analyser is 
# installed (REQUIRED)
# Note that no trailing slash should be used for the path and forward slashes
# are used.
#
# Suggested setting is the following environment variable. You would then rely
# on the environment variables set by sourcing QAC/QAC++ .profile or .cshrc etc.
#ANALYSER_BASE=$(QACPPPATH)
# or
#ANALYSER_BASE=$(QACPATH)
#
# NB Do not use tilde (~) as part of the path.
#
#ANALYSER_BASE=/opt/qacpp-3.0.1R
ANALYSER_BASE=/opt/qacpp


#
# Optional settings......
#


#
# INTEGRATION_TYPE
#
# This setting controls how the results for an analysis are displayed.
#
# The possible values are STDERR, TEXT or HTML or any combination of these
# If STDERR is set, then results will be sent to standard error (ideal for
# an IDE integration).
# If TEXT is set, then text annotated source shall be produced in the
# output directory (same directory as the object file produced by compilation).
# If HTML is set, then html annotated source shall be produced in the
# output directory (same directory as the object file produced by compilation).
#
#INTEGRATION_TYPE=STDERR
#INTEGRATION_TYPE=STDERR_TEXT_HTML
#INTEGRATION_TYPE=TEXT_HTML


#
# FILELIST is the name of a file in which to store a list of the files which
# are analysed and the output directory into which the analysis results are
# stored.  This filelist file can be used to launch the Message Browser or
# any project wide analysis or reporting.  One file will be created for each
# location in which output is generated.
# 
FILELIST=qacpp_filelist.lst

#
# POST_ANALYSIS is the name of a batch file or program which will be executed 
# following each successful analysis with either QAC or QAC++.  The flags
# -op OUTPUTPATH and the filename of the file will automatically be passed
# as implicit arguments to this batch file or program.
#
#POST_ANALYSIS=


#
# ANALYSER_FLAGS is used for additional flags that can be passed to the
# analyser (NOT REQUIRED)
#
ANALYSER_FLAGS=-ppl+ -ppf+


#
# ERRDSP_FLAGS is used for additional flags that can be passed to errdsp.
# Use this to hook in your coding standard. (NOT REQUIRED)
#ERRDSP_FLAGS=


#
# LOGFILE is set to the location of the logfile. If it is not set output 
# is sent to stdout. (NOT REQUIRED) 
#
# NB Do not use tilde (~) as part of the path.
#
#LOGFILE=/tmp/wrapper.log


#
# DEBUG can be set to 1 for extra debug information (NOT REQUIRED)
# The default for this is 0
#DEBUG=1


#
# STOP_ON_FAIL 
#
# This setting controls the behaviour of the wrapper if the initial analysis
# fails.
# The values for this are either 0 or 1.
#
# If STOP_ON_FAIL is set to 0 then compilation will continue after analysis
# regardless of the outcome of the analysis.
# 
# If STOP_ON_FAIL is set to 1 then the wrapper will stop if an analysis is
# not successful. This can be used if you want to make sure that
# you can analyse all your files using the wrapper.
#
# By default STOP_ON_FAIL is set to 0
#
#STOP_ON_FAIL=1
STOP_ON_FAIL=1


#
# SLEEP_AFTER_ANALYSIS
#
# This pauses wrapper after analysis for a specified number of seconds
# The values for this are any positive float
#
# By default SLEEP_AFTER_ANALYSIS is set to 0
#SLEEP_AFTER_ANALYSIS=0.25


#
# OUTPUT_DIR
# 
# This causes analysis output to go to the specified directory, rather 
# than the compiler output directory
#
# By default analysis output goes to the same place as the compiler output
#
# Note, if OUTPUT_DIR is absolute, then the supplied path is prepended to
# the location specified by the -o compiler option to create the actual
# QAC/QAC++ output path.
#
# If OUTPUT_DIR is a relative path, then then supplied path is appended to
# the location specified by the -o compiler option to create the actual
# QAC/QAC++ output path.
#
# NB Do not use tilde (~) as part of the path.
#
#OUTPUT_DIR=qac_out
#OUTPUT_DIR=/opt/qacpp-3.0R/TEMP_FILES


#
# DEFINE_ON_OPTION
#
# This causes a define to be passed to the analyser if the specified compiler
# option is present. Colons separate the option and define, multiple settings
# are separated by spaces.
#
#DEFINE_ON_OPTION=mt:_REENTRANT inline:INLINE_FUNCTION


#
# INLCLUDE_OPTION
#
# Wrapper accepts -i and -I as seach path options and pass the paths to
# the analyser. Some compilers have other options beginning with -i. 
# This setting tells wrapper which options specfiy the include paths via
# a regulat expression
#
# By defualt the setting is [I|i]
#
#INCLUDE_OPTION=I
#
# COMPLIANCE_MODULE
#
# Use a PRQA compliance module analyser personality and secondary
# analysis program to enforce a coding standard.
# Accepted settings are: mcm (MISRA 98), m2cm (MISRA C:2004), 
# hicppcm (High Integrity C++), mcppcm (MISRA C++) or jcm (JSF AV C++)
#
# COMPLIANCE_MODULE=mcm

#
# COMPLIANCE_MODULE_BASE
#
# If the compliance modules are not installed in their default location,
# enter the full path here.
#
# COMPLIANCE_MODULE_BASE=c:/compmods/


#
# SECONDARY_ANALYSIS
#
# Superceeds POST_ANALYSIS setting. Specify a secondary analysis process.
# Can be used more than once: processes will be executed in the order 
# that they appear. There are two built in tasks: name_check and baseline,
# otherwise specify a program/script
#
# SECONDARY_ANALYSIS=name_check -nrf c:/my_name_check.nrf
# SECONDARY_ANALYSIS=name_check -nrf /opt/qacpp-3.0R/personalities/example.nrf

#
# FILENAME_EXTENSIONS
#
# Set a semicolon delimited list of file extensions that wrapper will analyse.
# Setting this option replaces the default list.
#
FILENAME_EXTENSIONS=.c;.cc;.C;.cpp

#
# NON_COMPILE_OPTIONS
# 
# Set a space demlimited list of compiler options that do not result 
# in production of an object file.
# This prevents Wrapper from analysing files when the compiler is started 
# with these options.
#
# NON_COMPILE_OPTIONS=M E

#
# LOCK_FILES
#
# Make Wrapper lock the FILELIST and WQP_OUTPUT_DIR master file while 
# writing to them to prevent corruption in multi-processor builds.
# Default is 0 - no locking
#
# LOCK_FILES=1

#
# REMOTE_HOST
# 
# Set the hostname or IP address of a remote machine on which to run the 
# analysis commands
#
# REMOTE_HOST=192.168.1.200

#
# REMOTE_VIEWER_SCRIPT
# 
# Set to the name of a file that Wrapper will generate containing the 
# command to launch the Message Browser on the remote machine
#
# REMOTE_VIEWER_SCRIPT=show_veiwer

#
# REMOTE_MESSAGE_PERSONALITY
#
# Set to a message personality on the remote machine to be used when
# creating the command to launch the Message Browser
#
# REMOTE_MESSAGE_PERSONALITY=/usr/local/qac-7.2R/personalities/critical.p_s


#
# INCLUDE_PATH_SEPARATOR
#
# Allows specification of a separator of -I include paths.
# e.g if INCLUDE_PATH_SEPARATOR=,
# then given the following
# -I/patho/one,/path/two
# the following paths are assumed:
# /path/one
# /path/two
#
# INCLUDE_PATH_SEPARATOR=

// PRQA S 1050 EOF
/*

	Copyright 1995-2022, Exprivia SpA - DFDA_AS
	Via Della Bufalotta, 378 - 00139 Roma - Italy
	http://www.acsys.it

	All Rights Reserved.

	This is UNPUBLISHED PROPRIETARY SOURCE CODE of Exprivia SpA
	the contents of this file may not be disclosed to third parties, copied or
	duplicated in any form, in whole or in part, without the prior written
	permission of Exprivia SpA

	$Prod: A.C.S. Db Data Library $

	$Id$

	$Author$

	$Log$
	Revision 5.3  2016/04/11 13:20:17  marpas
	removing useless methods and also deprecated ones
	
	Revision 5.2  2016/03/26 21:45:49  marpas
	new database related I/F
	use of dbConnection is enforced as reference, not pointer
	moreover, dbConnection can be obtained only through a dbConnectionPool
	dbConnectionManager and dbConnectionGuard classes are not longer available
	
	Revision 5.1  2014/02/11 11:10:04  marpas
	refresh method removed: base class implements it
	
	Revision 5.0  2013/06/13 14:53:03  marpas
	adopting libException 5.x standards
	removing deprecated use of dbConnectionMgr
	general quality improvements
	best practices applied
	
	Revision 2.12  2013/03/29 19:50:57  marpas
	removing html related functions
	
	Revision 2.11  2013/02/28 14:06:45  marpas
	coding best practices applied
	interfaces rationalization
	libMessage dependencies removed
	qa warnings
	
	Revision 2.10  2013/01/22 17:37:06  marpas
	coding best practices
	interfaces rationalization
	singletons use SingletonTemplate
	qa rules
	efficiency slightly improved
	
	Revision 2.9  2012/11/16 13:40:45  marpas
	HEAD REALIGNEMENT
	
	Revision 2.6  2012/06/06 09:31:57  marfav
	code improved to remove compiler warnings
	
	Revision 2.5  2012/02/13 16:51:16  marpas
	refactoring in progress
	
	Revision 2.4  2011/10/14 07:53:09  marpas
	smart persistent and related classes load queries with read only
	refresh interface now has a connection pointer defaulted to null
	
	Revision 2.3  2011/03/02 18:16:21  marpas
	serial 8 supported on load too
	
	Revision 2.2  2011/03/02 17:39:38  marpas
	support to serial 8 improved
	
	Revision 2.1  2011/03/02 17:29:14  marpas
	support of serial 8 implemented
	
	Revision 2.0  2006/02/28 08:47:37  marpas
	Exception 2.1 I/F adopted
	
	Revision 1.12  2005/06/17 14:14:25  marpas
	std namespace use fixed
	
	Revision 1.11  2004/07/07 10:27:01  marpas
	dbPersistent I/F changed
	
	Revision 1.10  2004/05/03 14:14:40  marpas
	dbPersistent::remove I/F changed
	
	Revision 1.9  2004/04/07 17:00:28  marpas
	dbQueryWrapperMT & dbGeneralQueryIF classes added
	
	Revision 1.8  2004/02/04 10:11:27  paoscu
	dbPersistent interface chanched.
		

*/

// This file is automatically generated by dbGenerator tool

#ifndef _dbApplicationStatus_H_
#define _dbApplicationStatus_H_

#include <acs_c++config.hpp>
#include <exException.h>
#include <dbPersistent.h>

#include <string>

_ACS_BEGIN_NAMESPACE(acs)

class dbDataFactory ;

class dbRow ;
class rsResourceSet ;
class XMLOstream ;

//
//
//
// class dbApplicationStatus
//
//
//
class dbApplicationStatus :
	public dbPersistent
{
public:
	friend class dbDataFactory ; // PRQA S 2107

	virtual ~dbApplicationStatus() noexcept ;
	dbApplicationStatus &operator=(const dbApplicationStatus &) ; // operator =

	static  std::string staticClassName() ;

	// inherited from dbPersistent
	virtual dbPersistent * clone() const ; // PRQA S 2502
	virtual std::string className() const ;
	virtual void reset() ; // initialize the class

	virtual IdType save(dbConnection &)  ; // save the data in database
	virtual bool load(dbConnection & , IdType id=0)  ; // load the class from the database. Return true if obect exist
	virtual IdType update(dbConnection &)  ; // update an existing instance in database
	virtual IdType remove(dbConnection &)  ; // remove the class from the database // PRQA S 2502

	virtual bool validate() const  ; // True if the class have valid parameters, false otherwise
	virtual void exportObj(rsResourceSet &s) const ; // export the class to rsResourceSet
	virtual void importObj(rsResourceSet &s)  ; // import the class from a rsResourceSet
	virtual void exportXML(XMLOstream &xst) const ; // export the class to XML stream

	int loadRow(const dbRow &, int offset=0) ;

	void setApplication(const std::string &) ;
	const std::string &getApplication(bool *set=0) const ;
	void unsetApplication();

	void setInstance(const std::string &) ;
	const std::string &getInstance(bool *set=0) const ;
	void unsetInstance();

	// replace the file of an existing record
	void replaceStatusFile(const std::string &path, dbConnection &) ;
	// save the file on disk
	void saveStatusFile(const std::string &path, const std::string &filename, dbConnection &) ;

	std::string getStatusFileName() const ;
	// set/get the original file name
	void setStatusUploadFileName(const std::string &) ;
	std::string getStatusUploadFileName() const;

	static std::string getFields() ;
	static std::string getTable() ;
	static std::string getOrderBy() ;

	// output to stream
	virtual void writeTo(std::ostream &) const ;
	virtual void writeTo(exostream &) const ;


protected:
	dbApplicationStatus() ;
	dbApplicationStatus(const dbApplicationStatus &) ;
    // do not declare any move ctor or assigment op


private:
	std::string _application ;
	bool _applicationSet ;

	std::string _instance ;
	bool _instanceSet ;

	std::string _statusUploadFileName ;

	ACS_CLASS_DECLARE_DEBUG_LEVEL(dbApplicationStatus) ;
} ;


_ACS_END_NAMESPACE

#endif // _dbApplicationStatus_H_
